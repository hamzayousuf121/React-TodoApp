{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","handleTodoAdd","state","value","obj","title","edit","setState","todos","handleDelete","index","splice","deleteAll","editValue","handleEdit","handleUpdate","searchTodo","e","filterTodo","filter","todo","toLowerCase","includes","target","filterSearch","this","className","type","placeholder","onChange","onClick","map","item","i","href","key","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ae17da7e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todos: [{ title: 'Hamza', edit: false }, { title: 'yousuf', edit: false }, { title: 'Saylani', edit: false }],\n      value: '',\n      editValue: '',\n      filterSearch: ''\n    }\n  }\n\n\n  handleTodoAdd = () => {\n    // this.state.todos.push(this.state.value)\n    if (this.state.value !== '') {\n      let obj = { title: this.state.value, edit: false }\n      this.setState({\n        todos: [...this.state.todos, obj],\n        value: ''\n      })\n    }\n  }\n  handleDelete = (index) => {\n    this.state.todos.splice(index, 1)\n    this.setState({\n      todos: this.state.todos\n    })\n  }\n\n  deleteAll = () => {\n    this.setState({ todos: [], value: '', editValue: '' })\n  }\n  handleEdit = (index, value) => {\n    // const newValue = prompt(\"Enter Your Update Todo Value\", value)\n    // this.state.todos.splice(index, 1, newValue)\n    // this.setState({\n    //   todos: this.state.todos;\n\n    this.state.todos[index].edit = true;\n\n    this.setState({\n      todos: this.state.todos,\n      editValue: value\n    })\n  }\n  handleUpdate = (index) => {\n\n    this.state.todos[index].edit = false;\n    this.state.todos[index].title = this.state.editValue;\n\n    this.setState({\n      todos: this.state.todos,\n      editValue: '',\n    })\n  }\n\n  searchTodo = (e) => {\n      const filterTodo = this.state.todos.filter(todo => todo.title.toLowerCase().includes(e.target.value.toLowerCase()))\n      this.setState({\n        todos: filterTodo\n      })\n    }\n\n\n  render() {\n    const { todos, value, filterSearch,editValue } = this.state;\n    const filterTodo = todos.filter(todo => todo.title.toLowerCase().includes(filterSearch.toLowerCase()))\n    return (\n      <div className=\"container hoverable\">\n        <h1 className=\"heading\">React Todo App</h1>\n        <div className=\"input\">\n          <input type=\"text\" placeholder=\"Enter Todo name\" value={value} onChange={(e) => this.setState({ value: e.target.value })} />\n          <button className=\"waves-effect waves-light btn edit\" onClick={this.handleTodoAdd}>Add Todo</button>\n          <button className=\"waves-effect waves-light btn  red lighten-1 ml-5\" onClick={this.deleteAll}>Delete All Todo</button>\n        </div>\n        <div className=\"input\">\n        <input type=\"search\" placeholder=\"Search Todo name\" onChange={(e)=> this.setState({filterSearch: e.target.value})} />\n        </div>\n        <div className=\"collection hoverable\">\n          {filterTodo.map((item, i) => {\n            return (<div href=\"#\" key={i} className=\"collection-item\">\n              {item.edit ? <input type=\"text\" value={editValue}\n                onChange={(e) => this.setState({ editValue: e.target.value })} />\n                : item.title}\n              {item.edit ? \n               \n                <button className=\"btn waves-effect waves-light edit\" onClick={() => this.handleUpdate(i)}> Update </button> :\n                <button className=\"btn waves-effect waves-light edit\" onClick={() => this.handleEdit(i, item.title)}> Edit </button>}\n                <button className=\"btn waves-effect waves-light red lighten-1\" onClick={() => this.handleDelete(i)}> Delete </button>\n              \n            </div>\n            )\n          }\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}